#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>

int encode3_uin(params *dp,int ix, int iy, int iz, int field) {


  #ifdef USE_SAC_3D
    return ( (iz*((dp)->n[0])*((dp)->n[1])  + iy * ((dp)->n[0]) + ix)+(field*((dp)->n[0])*((dp)->n[1])*((dp)->n[2])));
  #else
    return ( (iy * ((dp)->n[0]) + ix)+(field*((dp)->n[0])*((dp)->n[1])));
  #endif
}

int fencode3_uin (struct params *dp,int *ii, int field) {


#ifdef USE_SAC_3D
   return (ii[2]*((dp)->n[0])*((dp)->n[1])  + ii[1] * ((dp)->n[0]) + ii[0]+(field*((dp)->n[0])*((dp)->n[1])*((dp)->n[2])));
#else
   return ( ii[1] * ((dp)->n[0]) + ii[0]+(field*((dp)->n[0])*((dp)->n[1])));
#endif

}


#ifdef USE_SAC_3D
real grad3dngen_uin(real ***wmod, real *wd,struct params *p,int *ii,int dir)
#else
real grad3dngen_uin(real **wmod, real *wd,struct params *p,int *ii,int dir)
#endif
{


 real grad=0;

 

 switch(dir)
 {
   case 0:
#ifdef USE_SAC_3D

if(ii[0]>1 && ii[0]<((p->n[0])-2) )
 grad=(  ( ((8*wmod[ii[0]+1][ii[1]][ii[2]]-8*wmod[ii[0]-1][ii[1]][ii[2]]+wmod[ii[0]-2][ii[1]][ii[2]]-wmod[ii[0]+2][ii[1]][ii[2]])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx1)]))    );




  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[0]==(p->n[0])-3) || (ii[0]==(p->n[0])-4)  && ii[1]>1   && ii[1]<(p->n[1])-2 && ii[2]>1   && ii[2]<(p->n[2])-2  )
       grad=0;
   else if(ii[0]==2 || ii[0]==3  && ii[1]>1   && ii[1]<(p->n[1])-2 && ii[2]>1   && ii[2]<(p->n[2])-2  )
       grad=0;
  #endif

#else  


if(ii[0]>1 && ii[0]<((p->n[0])-2) )
 grad=(  ( ((8*wmod[ii[0]+1][ii[1]]-8*wmod[ii[0]-1][ii[1]]+wmod[ii[0]-2][ii[1]]-wmod[ii[0]+2][ii[1]])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx1)]))    );



  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[0]==(p->n[0])-3) || (ii[0]==(p->n[0])-4)  && ii[1]>1   && ii[1]<(p->n[1])-2  )
       grad=0;
   else if(ii[0]==2 || ii[0]==3  && ii[1]>1   && ii[1]<(p->n[1])-2  )
       grad=0;
  #endif
#endif


   break;

   case 1:


#ifdef USE_SAC_3D


if( ii[1] >1 &&  ii[1]<((p->n[1])-2))
	grad=(  ( ((8*wmod[ii[0]][ii[1]+1][ii[2]]-8*wmod[ii[0]][ii[1]-1][ii[2]]+wmod[ii[0]][ii[1]-2][ii[2]]-wmod[ii[0]][ii[1]+2][ii[2]])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx2)]))    );


  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[1]==(p->n[1])-3) || (ii[1]==(p->n[1])-4)  && ii[0]>1   && ii[0]<(p->n[0])-2  && ii[2]>1   && ii[2]<(p->n[2])-2  )
       grad=0;
   else if(ii[1]==2 || ii[1]==3  && ii[0]>1   && ii[0]<(p->n[0])-2  && ii[2]>1   && ii[2]<(p->n[2])-2  )
       grad=0;
  #endif
#else

 
if( ii[1] >1 &&  ii[1]<((p->n[1])-2))
	grad=(  ( ((8*wmod[ii[0]][ii[1]+1]-8*wmod[ii[0]][ii[1]-1]+wmod[ii[0]][ii[1]-2]-wmod[ii[0]][ii[1]+2])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx2)]))    );



  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[1]==(p->n[1])-3) || (ii[1]==(p->n[1])-4)  && ii[0]>1   && ii[0]<(p->n[0])-2  )
       grad=0;
   else if(ii[1]==2 || ii[1]==3  && ii[0]>1   && ii[0]<(p->n[0])-2  )
       grad=0;
  #endif
#endif


   break;


   case 2:
#ifdef USE_SAC_3D
 
if( ii[2] >1 &&  ii[2]<((p->n[2])-2))
	grad=(  ( ((8*wmod[ii[0]][ii[1]][ii[2]+1]-8*wmod[ii[0]][ii[1]][ii[2]-1]+wmod[ii[0]][ii[1]][ii[2]-2]-wmod[ii[0]][ii[1]][ii[2]+2])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx3)]))    );




  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[2]==(p->n[2])-3) || (ii[2]==(p->n[2])-4)  && ii[0]>1   && ii[0]<(p->n[0])-2 && ii[1]>1   && ii[1]<(p->n[1])-2  )
       grad=0;
   else if(ii[2]==2 || ii[2]==3  && ii[0]>1   && ii[0]<(p->n[0])-2 && ii[1]>1   && ii[1]<(p->n[1])-2  )
       grad=0;
  #endif
#endif

   break;


}



 return grad;


}



real grad3dn_uin(real *wmod, real *wd,struct params *p,int *ii,int field,int dir)
{


 real grad=0;

 

 switch(dir)
 {
   case 0:
 
#ifdef USE_SAC_3D
  #ifdef USE_DORDER3
 if(ii[0]>2 && ii[0]<((p->n[0])-3) )
  grad=(  ( ((3*wmod[encode3_uin(p,ii[0]+1,ii[1],ii[2],field)]-3*wmod[encode3_uin(p,ii[0]-1,ii[1],ii[2],field)]+3.0*(wmod[encode3_uin(p,ii[0]-2,ii[1],ii[2],field)]-wmod[encode3_uin(p,ii[0]+2,ii[1],ii[2],field)])/5.0-(wmod[encode3_uin(p,ii[0]-3,ii[1],ii[2],field)]-wmod[encode3_uin(p,ii[0]+3,ii[1],ii[2],field)])/15.0)/2.0))/(2.0*(wd[fencode3_uin(p,ii,delx1)]))    );

  #else
if(ii[0]>1 && ii[0]<((p->n[0])-2) )
 grad=(  ( ((8*wmod[encode3_uin(p,ii[0]+1,ii[1],ii[2],field)]-8*wmod[encode3_uin(p,ii[0]-1,ii[1],ii[2],field)]+wmod[encode3_uin(p,ii[0]-2,ii[1],ii[2],field)]-wmod[encode3_uin(p,ii[0]+2,ii[1],ii[2],field)])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx1)]))    );
 #endif

#ifdef USE_MPI
if(p->boundtype[field][dir][0] !=1  )
  if(p->mpiupperb[dir]==1  )
#else
if(p->boundtype[field][dir][0] !=0  )
#endif
{

  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[0]==(p->n[0])-3) || (ii[0]==(p->n[0])-4)  && ii[1]>1   && ii[1]<(p->n[1])-2 && ii[2]>1   && ii[2]<(p->n[2])-2  )
       grad=0;
   else if(ii[0]==2 || ii[0]==3  && ii[1]>1   && ii[1]<(p->n[1])-2 && ii[2]>1   && ii[2]<(p->n[2])-2  )
       grad=0;
  #endif
}
#else  

  #ifdef USE_DORDER3
if(ii[0]>2 && ii[0]<((p->n[0])-3) )
 grad=(  ( ((3*wmod[encode3_uin(p,ii[0]+1,ii[1],0,field)]-3*wmod[encode3_uin(p,ii[0]-1,ii[1],0,field)]+3.0*(wmod[encode3_uin(p,ii[0]-2,ii[1],0,field)]-wmod[encode3_uin(p,ii[0]+2,ii[1],0,field)])/5.0-(wmod[encode3_uin(p,ii[0]-3,ii[1],0,field)]-wmod[encode3_uin(p,ii[0]+3,ii[1],0,field)])/15.0)/2.0))/(2.0*(wd[fencode3_uin(p,ii,delx1)]))    );

  #else
if(ii[0]>1 && ii[0]<((p->n[0])-2) )
 grad=(  ( ((8*wmod[encode3_uin(p,ii[0]+1,ii[1],0,field)]-8*wmod[encode3_uin(p,ii[0]-1,ii[1],0,field)]+wmod[encode3_uin(p,ii[0]-2,ii[1],0,field)]-wmod[encode3_uin(p,ii[0]+2,ii[1],0,field)])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx1)]))    );
 #endif
#ifdef USE_MPI
if(p->boundtype[field][dir][0] !=1  )
  if(p->mpiupperb[dir]==1  )
#else
if(p->boundtype[field][dir][0] !=0  )
#endif
{

  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[0]==(p->n[0])-3) || (ii[0]==(p->n[0])-4)  && ii[1]>1   && ii[1]<(p->n[1])-2  )
       grad=0;
   else if(ii[0]==2 || ii[0]==3  && ii[1]>1   && ii[1]<(p->n[1])-2  )
       grad=0;
  #endif
}
#endif



   break;

   case 1:

#ifdef USE_SAC_3D

  #ifdef USE_DORDER3
 if(ii[1]>2 && ii[1]<((p->n[1])-3) )
  grad=(  ( ((3*wmod[encode3_uin(p,ii[0],ii[1]+1,ii[2],field)]-3*wmod[encode3_uin(p,ii[0],ii[1]-1,ii[2],field)]+3.0*(wmod[encode3_uin(p,ii[0],ii[1]-2,ii[2],field)]-wmod[encode3_uin(p,ii[0],ii[1]+2,ii[2],field)])/5.0-(wmod[encode3_uin(p,ii[0],ii[1]-3,ii[2],field)]-wmod[encode3_uin(p,ii[0],ii[1]+3,ii[2],field)])/15.0)/2.0))/(2.0*(wd[fencode3_uin(p,ii,delx2)]))    );

#else
if( ii[1] >1 &&  ii[1]<((p->n[1])-2))
	grad=(  ( ((8*wmod[encode3_uin(p,ii[0],ii[1]+1,ii[2],field)]-8*wmod[encode3_uin(p,ii[0],ii[1]-1,ii[2],field)]+wmod[encode3_uin(p,ii[0],ii[1]-2,ii[2],field)]-wmod[encode3_uin(p,ii[0],ii[1]+2,ii[2],field)])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx2)]))    );
 #endif
#ifdef USE_MPI
if(p->boundtype[field][dir][0] !=1  )
  if(p->mpiupperb[dir]==1  )
#else
if(p->boundtype[field][dir][0] !=0  )
#endif
{
  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[1]==(p->n[1])-3) || (ii[1]==(p->n[1])-4)  && ii[0]>1   && ii[0]<(p->n[0])-2  && ii[2]>1   && ii[2]<(p->n[2])-2  )
       grad=0;
   else if(ii[1]==2 || ii[1]==3  && ii[0]>1   && ii[0]<(p->n[0])-2  && ii[2]>1   && ii[2]<(p->n[2])-2  )
       grad=0;
  #endif
}
#else

  #ifdef USE_DORDER3
if(ii[1]>2 && ii[1]<((p->n[1])-3) )
 grad=(  ( ((3*wmod[encode3_uin(p,ii[0],ii[1]+1,0,field)]-3*wmod[encode3_uin(p,ii[0],ii[1]-1,0,field)]+3.0*(wmod[encode3_uin(p,ii[0],ii[1]-2,0,field)]-wmod[encode3_uin(p,ii[0],ii[1]+2,0,field)])/5.0-(wmod[encode3_uin(p,ii[0],ii[1]-3,0,field)]-wmod[encode3_uin(p,ii[0],ii[1]+3,0,field)])/15.0)/2.0))/(2.0*(wd[fencode3_uin(p,ii,delx2)]))    );

#endif
if( ii[1] >1 &&  ii[1]<((p->n[1])-2))
	grad=(  ( ((8*wmod[encode3_uin(p,ii[0],ii[1]+1,0,field)]-8*wmod[encode3_uin(p,ii[0],ii[1]-1,0,field)]+wmod[encode3_uin(p,ii[0],ii[1]-2,0,field)]-wmod[encode3_uin(p,ii[0],ii[1]+2,0,field)])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx2)]))    );

#ifdef USE_MPI
if(p->boundtype[field][dir][0] !=1  )
  if(p->mpiupperb[dir]==1  )
#else
if(p->boundtype[field][dir][0] !=0  )
#endif
{

  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[1]==(p->n[1])-3) || (ii[1]==(p->n[1])-4)  && ii[0]>1   && ii[0]<(p->n[0])-2  )
       grad=0;
   else if(ii[1]==2 || ii[1]==3  && ii[0]>1   && ii[0]<(p->n[0])-2  )
       grad=0;
  #endif
}
#endif
   break;


   case 2:

#ifdef USE_SAC_3D
  #ifdef USE_DORDER3
 if(ii[2]>2 && ii[2]<((p->n[2])-3) )
  grad=(  ( ((3*wmod[encode3_uin(p,ii[0],ii[1],ii[2]+1,field)]-3*wmod[encode3_uin(p,ii[0],ii[1],ii[2]-1,field)]+3.0*(wmod[encode3_uin(p,ii[0],ii[1],ii[2]-2,field)]-wmod[encode3_uin(p,ii[0],ii[1],ii[2]+2,field)])/5.0-(wmod[encode3_uin(p,ii[0],ii[1],ii[2]-3,field)]-wmod[encode3_uin(p,ii[0],ii[1],ii[2]+3,field)])/15.0)/2.0))/(2.0*(wd[fencode3_uin(p,ii,delx3)]))    );

#else
if( ii[2] >1 &&  ii[2]<((p->n[2])-2))
	grad=(  ( ((8*wmod[encode3_uin(p,ii[0],ii[1],ii[2]+1,field)]-8*wmod[encode3_uin(p,ii[0],ii[1],ii[2]-1,field)]+wmod[encode3_uin(p,ii[0],ii[1],ii[2]-2,field)]-wmod[encode3_uin(p,ii[0],ii[1],ii[2]+2,field)])/6.0))/(2.0*(wd[fencode3_uin(p,ii,delx3)]))    );
#endif

#ifdef USE_MPI
if(p->boundtype[field][dir][0] !=1  )
  if(p->mpiupperb[dir]==1  )
#else
if(p->boundtype[field][dir][0] !=0  )
#endif
{

  ;//for OZT test using MPI use this directive further clarification needed
  #ifndef USE_MPI
   if((ii[2]==(p->n[2])-3) || (ii[2]==(p->n[2])-4)  && ii[0]>1   && ii[0]<(p->n[0])-2 && ii[1]>1   && ii[1]<(p->n[1])-2  )
       grad=0;
   else if(ii[2]==2 || ii[2]==3  && ii[0]>1   && ii[0]<(p->n[0])-2 && ii[1]>1   && ii[1]<(p->n[1])-2  )
       grad=0;
  #endif
}
#endif
   break;

}



 return grad;


}









//sum=inte(dpdz,i,j,p->dx[0]);

real inte(real **w,int n, int i, int j, real dx)
{

	real res=0.0;

	if (n == 2) 
	  res=dx*0.5*(w[0][j]+w[1][j]);
	else if (n>2) 
	{
	  if(i==0) i++;
	  for( int ii=i;ii<n; ii++)
	      res=res+0.5*(w[ii-1][j]+w[ii][j])*dx;


	}

	return res;
}


//bach3d

void initialisation_user1(real *w, real *wd, struct params *p) {
                    
//see http://www.astro.virginia.edu/VITA/ATHENA/blast.html

 


	real p1,p2,rho0,rho2,v1,v2,v3,T1,T2, xc,yc,zc,r0;
	real Ly, e0,c0;
        real x,y,z;
        real rgamm1, e1;
        int n1,n2,n3;

	real po=0.1;
	real pi=10.0;
        real rad;

      
        int ii[3];

	Ly=9.46e15;

	//e0=1.e44;
	//e0=1.e52;
        e0=1.e60;

	c0=8.95e10;

	p1=1.e0;
	//rho0=4.0e-24;
        //rho0=1.0e3;
        rho0=1.0;
	v1=0.e0;
	v2=0.e0;



	n1=p->n[0];
        n2=p->n[1];
	xc=n1*(p->dx[0])/2;
	yc=n2*(p->dx[1])/2;

#ifdef USE_SAC_3D
        n3=p->n[2];

	//c0=8.95e13;
        c0=0;


//	rho0=2.e-22;


	v3=0.e0;


	zc=n3*(p->dx[2])/2;
#endif
	
	
	
	
	

	  int i,j,k;

	for(k=0;k<=n3-1;k++)
	for(j=0;j<=n2-1;j++)
	   for(i=0;i<=n1-1;i++)
	   {



	  ii[0]=i;
	  ii[1]=j;
	  


          x=i*(p->dx[0])+(p->xmin[0]);
          y=j*(p->dx[1])+(p->xmin[1]);

          rad=sqrt(x*x+y*y);


	#ifdef USE_SAC_3D
	 	  ii[2]=k;

          z=k*(p->dx[2])+(p->xmin[2]);
          rad=sqrt(rad*rad+z*z);


         
		

                    w[fencode3_uin(p,ii,rhob)]=0.0;
                    w[fencode3_uin(p,ii,energy)]=0.0;
		    w[fencode3_uin(p,ii,rhob)]=rho0+c0/((x-xc)*(x-xc)+(y-yc)*(y-yc)+(z-zc)*(z-zc));
			//w[fencode3_uin(p,ii,rhob)]=rho0;

                    rgamm1=1.0/((p->gamma)-1);
if(rad>=0.1)
	e1=rgamm1*(  po-0.5*(w[fencode3_uin(p,ii,b1)]*w[fencode3_uin(p,ii,b1)]+w[fencode3_uin(p,ii,b2)]*w[fencode3_uin(p,ii,b2)]+w[fencode3_uin(p,ii,b3)]*w[fencode3_uin(p,ii,b3)]))+0.5*(rho0*(v1*v1+v2*v2+v3*v3)+(w[fencode3_uin(p,ii,b1)]*w[fencode3_uin(p,ii,b1)]+w[fencode3_uin(p,ii,b2)]*w[fencode3_uin(p,ii,b2)]+w[fencode3_uin(p,ii,b3)]*w[fencode3_uin(p,ii,b3)]));
else
	e1=rgamm1*(  pi-0.5*(w[fencode3_uin(p,ii,b1)]*w[fencode3_uin(p,ii,b1)]+w[fencode3_uin(p,ii,b2)]*w[fencode3_uin(p,ii,b2)]+w[fencode3_uin(p,ii,b3)]*w[fencode3_uin(p,ii,b3)]))+0.5*(rho0*(v1*v1+v2*v2+v3*v3)+(w[fencode3_uin(p,ii,b1)]*w[fencode3_uin(p,ii,b1)]+w[fencode3_uin(p,ii,b2)]*w[fencode3_uin(p,ii,b2)]+w[fencode3_uin(p,ii,b3)]*w[fencode3_uin(p,ii,b3)]));


                   // w[fencode3_uin(p,ii,energyb)]=rgamm1*pow(rho0,(p->gamma));
		    w[fencode3_uin(p,ii,energyb)]=0.0;
		    w[fencode3_uin(p,ii,b1)]=0;
		    w[fencode3_uin(p,ii,b2)]=0;
		    w[fencode3_uin(p,ii,b3)]=0;


		    w[fencode3_uin(p,ii,mom3)]=v3;
		    w[fencode3_uin(p,ii,mom2)]=v2;
		    w[fencode3_uin(p,ii,mom1)]=v1;

                  // e1=(0.5*rgamm1*(1-((p->gamma)-1))*(w[fencode3_uin(p,ii,b1)]*w[fencode3_uin(p,ii,b1)]+w[fencode3_uin(p,ii,b2)]*w[fencode3_uin(p,ii,b2)]+w[fencode3_uin(p,ii,b3)]*w[fencode3_uin(p,ii,b3)]));
                   // w[fencode3_uin(p,ii,energyb)]=w[fencode3_uin(p,ii,energyb)]-e1;
                  


                   // w[fencode3_uin(p,ii,energy)]=w[fencode3_uin(p,ii,energyb)];
		 w[fencode3_uin(p,ii,energy)]=e1;
                   // w[fencode3_uin(p,ii,energyb)]=0.0;

                    
                    w[fencode3_uin(p,ii,rho)]=w[fencode3_uin(p,ii,rhob)];
                  	w[fencode3_uin(p,ii,rhob)]=0.0;


                     //if(i==63 && j==63  && k==63)
                     //  w[fencode3_uin(p,ii,energy)]=e0;
                       // w[fencode3_uin(p,ii,energy)]=e0/pow(p->dx[0],3.0);
  
			// w(40,28,e_)=e0/(x(1,3,2)-x(1,2,2))**3.d0
			//  w(80,92,e_)=e0/(x(1,3,2)-x(1,2,2))**3.d0  

		    w[fencode3_uin(p,ii,b1b)]=w[fencode3_uin(p,ii,b1)];
		    w[fencode3_uin(p,ii,b2b)]=w[fencode3_uin(p,ii,b2)];
		    w[fencode3_uin(p,ii,b3b)]=w[fencode3_uin(p,ii,b3)];

		    w[fencode3_uin(p,ii,b1)]=0;
		    w[fencode3_uin(p,ii,b2)]=0;
		    w[fencode3_uin(p,ii,b3)]=0;




       #endif
       
 
  
  

#ifdef USE_SAC
                    w[fencode3_uin(p,ii,rhob)]=0.0;
                    w[fencode3_uin(p,ii,energy)]=0.0;
		    w[fencode3_uin(p,ii,rhob)]=rho0+(c0/((x-xc)*(x-xc)+(y-yc)*(y-yc)));
                    //w[fencode3_uin(p,ii,rhob)]=rho0;
                   // if(i==127 && j==127)
                   //    w[fencode3_uin(p,ii,rhob)]=1.0e-23;

                    rgamm1=1.0/((p->gamma)-1);
                    w[fencode3_uin(p,ii,energyb)]=rgamm1*pow(rho0,(p->gamma));
		    
		    w[fencode3_uin(p,ii,b1)]=0;
		    w[fencode3_uin(p,ii,b2)]=0;


		    w[fencode3_uin(p,ii,mom2)]=v2;
		    w[fencode3_uin(p,ii,mom1)]=v1;

                   e1=(0.5*rgamm1*(1-((p->gamma)-1))*(w[fencode3_uin(p,ii,b1)]*w[fencode3_uin(p,ii,b1)]+w[fencode3_uin(p,ii,b2)]*w[fencode3_uin(p,ii,b2)]));
                    w[fencode3_uin(p,ii,energyb)]=w[fencode3_uin(p,ii,energyb)]-e1;


                    //w[fencode3_uin(p,ii,energy)]=w[fencode3_uin(p,ii,energyb)];
                    //w[fencode3_uin(p,ii,energyb)]=0.0;

                    w[fencode3_uin(p,ii,rho)]=0;
                    //w[fencode3_uin(p,ii,rhob)]=0.0;
                    w[fencode3_uin(p,ii,rho)]=w[fencode3_uin(p,ii,rhob)];
                  w[fencode3_uin(p,ii,rhob)]=0.0;

                     if(i==127 && j==42)
                        w[fencode3_uin(p,ii,energy)]=e0/pow(p->dx[0],3.0);
  
			// w(40,28,e_)=e0/(x(1,3,2)-x(1,2,2))**3.d0
			//  w(80,92,e_)=e0/(x(1,3,2)-x(1,2,2))**3.d0  

		    w[fencode3_uin(p,ii,b1b)]=w[fencode3_uin(p,ii,b1)];
		    w[fencode3_uin(p,ii,b2b)]=w[fencode3_uin(p,ii,b2)];

		    //w[fencode3_uin(p,ii,b1)]=0;
		    //w[fencode3_uin(p,ii,b2)]=0;

#endif


	}

 


}

void initialisation_user2(real *w, real *wd, struct params *p) {
                    



}






